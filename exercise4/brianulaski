HOMEWORK #4

## Make new directory and bring in fastq file and downloaded database.
# make a new directory for Exercise 4 and go there

mkdir ~/exercise4
cd ~/exercise4

# Copy fastq file into new directory
cp ~/exercise2/SRR1145846_S1_L001_R1_001.fastq ~/exercise4/

# make a soft link to the metagenomic data from Exercise 2

ln -s ~/exercise2/SRR1145846_S1_L001_R1_001.fastq ./

# download the Swiss-Prot database by ftp

wget ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz  

# unzip the file

gunzip uniprot_sprot.fasta.gz  


## BLAST
# make a BLAST-formatted version of the Swiss-Prot database
makeblastdb -in uniprot_sprot.fasta -out uniprot_sprot -dbtype prot -hash_index -parse_seqids  

# BLAST only takes FASTA input so use your FASTQ to FASTA converter from exercise2
./fastq2fasta_BPU.sh SRR1145846_S1_L001_R1_001.fastq

# This command runs blastX
# in BLAST parlance, the 'query' is the sequence you want to identify
# while 'subject' is a sequence in the reference database
# the ampersand (&) at the end of the line tells bash to put the command into the background, 
# the same as doing Ctrl-Z and typing 'bg'. To bring it back into the foreground type 'fg'

blastx -query SRR1145846_S1_L001_R1_001.fasta -db uniprot_sprot -out blastx_output.csv -outfmt 6 &    


## DIAMOND
# download DIAMOND from github  

wget http://github.com/bbuchfink/diamond/releases/download/v0.7.11/diamond-linux64.tar.gz
tar xzf diamond-linux64.tar.gz

# make a DIAMOND-formatted version of the Swiss-Prot database, should take a minute or two  

./diamond makedb --in uniprot_sprot.fasta -d uniprot_sprot

# this is the DIAMOND-equivalent of running BLASTX 
# this command is the query search that finds metagenomic matches with an e-value of less than 1e-10 (HOMEWORK 4!!!)
./diamond blastx -d uniprot_sprot -q SRR1145846_S1_L001_R1_001.fastq -a diamond_output -e 1e-10

# to get results in a BLAST-equivalent format use the `view` command
./diamond view -a diamond_output.daa -o diamond_output.csv

# cut out the second column and save it into a new file
cut -f2 diamond_output.csv > diamond_acc.txt

# run `blastdbcmd` with the -entry_batch command to tell it you'll be giving it a list of accessions
# the -outputfmt flag tells it to output just the annotation for each matching sequence
blastdbcmd -db uniprot_sprot -entry_batch diamond_acc.txt -out diamond_output.txt -outfmt '%t'

### REC/ NO OUTPUT PROVIDED
